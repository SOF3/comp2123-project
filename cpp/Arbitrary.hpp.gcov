        -:    0:Source:libs/rapidcheck/include/rapidcheck/gen/Arbitrary.hpp
        -:    0:Programs:6
        -:    1:#pragma once
        -:    2:
        -:    3:namespace rc {
        -:    4:namespace gen {
        -:    5:namespace detail {
        -:    6:
        -:    7:template <typename T>
        -:    8:struct DefaultArbitrary;
        -:    9:
        -:   10:} // namespace detail
        -:   11:
        -:   12:template <typename T>
      111:   13:decltype(Arbitrary<T>::arbitrary()) arbitrary() {
      111:   14:  static const auto instance = rc::Arbitrary<T>::arbitrary();
      111:   15:  return instance;
        -:   16:}
------------------
_ZN2rc3gen9arbitraryIdEEDTclsrNS_9ArbitraryIT_EE9arbitraryEEv:
        1:   13:decltype(Arbitrary<T>::arbitrary()) arbitrary() {
        1:   14:  static const auto instance = rc::Arbitrary<T>::arbitrary();
        1:   15:  return instance;
        -:   16:}
------------------
_ZN2rc3gen9arbitraryISt6vectorIdSaIdEEEEDTclsrNS_9ArbitraryIT_EE9arbitraryEEv:
        1:   13:decltype(Arbitrary<T>::arbitrary()) arbitrary() {
        1:   14:  static const auto instance = rc::Arbitrary<T>::arbitrary();
        1:   15:  return instance;
        -:   16:}
------------------
_ZN2rc3gen9arbitraryISt5tupleIJSt6vectorIdSaIdEEEEEEDTclsrNS_9ArbitraryIT_EE9arbitraryEEv:
      109:   13:decltype(Arbitrary<T>::arbitrary()) arbitrary() {
      109:   14:  static const auto instance = rc::Arbitrary<T>::arbitrary();
      109:   15:  return instance;
        -:   16:}
------------------
        -:   17:
        -:   18:} // namespace gen
        -:   19:
        -:   20:template <typename T>
        -:   21:struct Arbitrary {
        3:   22:  static decltype(gen::detail::DefaultArbitrary<T>::arbitrary()) arbitrary() {
        3:   23:    return gen::detail::DefaultArbitrary<T>::arbitrary();
        -:   24:  }
        -:   25:};
        -:   26:
        -:   27:} // namespace rc
        -:   28:
        -:   29:#include "Arbitrary.hpp"
