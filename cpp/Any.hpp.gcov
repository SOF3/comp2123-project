        -:    0:Source:libs/rapidcheck/include/rapidcheck/detail/Any.hpp
        -:    0:Graph:sciNot5.gcno
        -:    0:Data:sciNot5.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <cassert>
        -:    4:
        -:    5:#include "rapidcheck/Traits.h"
        -:    6:#include "rapidcheck/Show.h"
        -:    7:#include "Utility.h"
        -:    8:#include "ShowType.h"
        -:    9:
        -:   10:namespace rc {
        -:   11:namespace detail {
        -:   12:
        -:   13:class Any::IAnyImpl {
        -:   14:public:
        -:   15:  virtual void *get() = 0;
        -:   16:  virtual void showType(std::ostream &os) const = 0;
        -:   17:  virtual void showValue(std::ostream &os) const = 0;
        -:   18:  virtual const std::type_info &typeInfo() const = 0;
     116*:   19:  virtual ~IAnyImpl() = default;
------------------
_ZN2rc6detail3Any8IAnyImplD0Ev:
    #####:   19:  virtual ~IAnyImpl() = default;
------------------
_ZN2rc6detail3Any8IAnyImplD2Ev:
      116:   19:  virtual ~IAnyImpl() = default;
------------------
        -:   20:};
        -:   21:
        -:   22:template <typename T>
        -:   23:class Any::AnyImpl : public Any::IAnyImpl {
        -:   24:public:
        -:   25:  template <typename ValueT>
      116:   26:  AnyImpl(ValueT &&value)
      116:   27:      : m_value(std::forward<ValueT>(value)) {}
        -:   28:
      115:   29:  void *get() override { return &m_value; }
        -:   30:
        1:   31:  void showType(std::ostream &os) const override { rc::detail::showType<T>(os); }
        -:   32:
        1:   33:  void showValue(std::ostream &os) const override { show(m_value, os); }
        -:   34:
      115:   35:  const std::type_info &typeInfo() const override { return typeid(T); }
        -:   36:
        -:   37:private:
        -:   38:  T m_value;
        -:   39:};
        -:   40:
        -:   41:/// Constructs a new `Any` with the given value.
        -:   42:template <typename T>
      116:   43:Any Any::of(T &&value) {
      116:   44:  Any any;
      116:   45:  any.m_impl.reset(new AnyImpl<Decay<T>>(std::forward<T>(value)));
      116:   46:  return any;
        -:   47:}
        -:   48:
        -:   49:template <typename T>
        -:   50:const T &Any::get() const {
        -:   51:  assert(m_impl);
        -:   52:  assert(m_impl->typeInfo() == typeid(T));
        -:   53:  return *static_cast<T *>(m_impl->get());
        -:   54:}
        -:   55:
        -:   56:template <typename T>
      115:   57:T &Any::get() {
     115*:   58:  assert(m_impl);
     115*:   59:  assert(m_impl->typeInfo() == typeid(T));
      115:   60:  return *static_cast<T *>(m_impl->get());
        -:   61:}
        -:   62:
        -:   63:} // namespace detail
        -:   64:} // namespace rc
