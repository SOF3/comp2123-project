        -:    0:Source:libs/rapidcheck/include/rapidcheck/detail/Capture.h
        -:    0:Programs:6
        -:    1:#pragma once
        -:    2:
        -:    3:#include <string>
        -:    4:
        -:    5:#include "rapidcheck/Show.h"
        -:    6:
        -:    7:#define RC_FOREACH_OP(RC_F)                                                    \
        -:    8:  RC_F(Mul, *)                                                                 \
        -:    9:  RC_F(Div, / )                                                                \
        -:   10:  RC_F(Rem, % )                                                                \
        -:   11:  RC_F(Plus, +)                                                                \
        -:   12:  RC_F(Minus, -)                                                               \
        -:   13:  RC_F(LShift, << )                                                            \
        -:   14:  RC_F(RShift, >> )                                                            \
        -:   15:  RC_F(LT, < )                                                                 \
        -:   16:  RC_F(GT, > )                                                                 \
        -:   17:  RC_F(GTEq, >= )                                                              \
        -:   18:  RC_F(LTEq, <= )                                                              \
        -:   19:  RC_F(Eq, == )                                                                \
        -:   20:  RC_F(NEq, != )                                                               \
        -:   21:  RC_F(And, &)                                                                 \
        -:   22:  RC_F(XOR, ^)                                                                 \
        -:   23:  RC_F(OR, | )                                                                 \
        -:   24:  RC_F(BoolAND, &&)                                                            \
        -:   25:  RC_F(BoolOR, || )
        -:   26:
        -:   27:namespace rc {
        -:   28:namespace detail {
        -:   29:namespace expr {
        -:   30:
        -:   31:#define RC_FWD_OP_CLASS(Name, op)                                              \
        -:   32:  template <typename LExpr, typename RHS>                                      \
        -:   33:  class Name;
        -:   34:
        -:   35:RC_FOREACH_OP(RC_FWD_OP_CLASS)
        -:   36:
        -:   37:#undef RC_FWD_OP_CLASS
        -:   38:
        -:   39:template <typename This>
        -:   40:class Expr {
        -:   41:public:
        -:   42:#define RC_OP_OVERLOAD(Name, op)                                               \
        -:   43:  template <typename RHS>                                                      \
        -:   44:  expr::Name<This, RHS> operator op(const RHS &rhs) const {                    \
        -:   45:    return expr::Name<This, RHS>(*static_cast<const This *>(this), rhs);       \
        -:   46:  }
        -:   47:
     4928:   48:  RC_FOREACH_OP(RC_OP_OVERLOAD)
------------------
_ZNK2rc6detail4expr4ExprINS1_4LTEqINS1_5ValueIdEEdEEEaaIbEENS1_7BoolANDIS6_T_EERKSA_:
     2453:   48:  RC_FOREACH_OP(RC_OP_OVERLOAD)
------------------
_ZNK2rc6detail4expr4ExprINS1_5ValueIdEEEleIdEENS1_4LTEqIS4_T_EERKS8_:
     2453:   48:  RC_FOREACH_OP(RC_OP_OVERLOAD)
------------------
_ZNK2rc6detail4expr4ExprINS1_4LTEqINS1_5ValueIiEEiEEEaaIbEENS1_7BoolANDIS6_T_EERKSA_:
       11:   48:  RC_FOREACH_OP(RC_OP_OVERLOAD)
------------------
_ZNK2rc6detail4expr4ExprINS1_5ValueIiEEEleIiEENS1_4LTEqIS4_T_EERKS8_:
       11:   48:  RC_FOREACH_OP(RC_OP_OVERLOAD)
------------------
        -:   49:
        -:   50:#undef RC_OP_OVERLOAD
        -:   51:};
        -:   52:
        -:   53:template <typename T>
        -:   54:class Value : public Expr<Value<T>> {
        -:   55:public:
        -:   56:  using ValueType = T;
        -:   57:
     2464:   58:  explicit Value(const T &value)
     2464:   59:      : m_value(value) {}
------------------
_ZN2rc6detail4expr5ValueIdEC2ERKd:
     2453:   58:  explicit Value(const T &value)
     2453:   59:      : m_value(value) {}
------------------
_ZN2rc6detail4expr5ValueIiEC2ERKi:
       11:   58:  explicit Value(const T &value)
       11:   59:      : m_value(value) {}
------------------
        -:   60:
     2464:   61:  const ValueType &value() const { return m_value; }
------------------
_ZNK2rc6detail4expr5ValueIdE5valueEv:
     2453:   61:  const ValueType &value() const { return m_value; }
------------------
_ZNK2rc6detail4expr5ValueIiE5valueEv:
       11:   61:  const ValueType &value() const { return m_value; }
------------------
       7*:   62:  void show(std::ostream &os) const { ::rc::show(m_value, os); }
------------------
_ZNK2rc6detail4expr5ValueIdE4showERSo:
    #####:   62:  void show(std::ostream &os) const { ::rc::show(m_value, os); }
------------------
_ZNK2rc6detail4expr5ValueIiE4showERSo:
        7:   62:  void show(std::ostream &os) const { ::rc::show(m_value, os); }
------------------
        -:   63:
        -:   64:private:
        -:   65:  const T &m_value;
        -:   66:};
        -:   67:
        -:   68:#define RC_OP_CLASS(Name, op)                                                  \
        -:   69:  template <typename LExpr, typename RHS>                                      \
        -:   70:  class Name : public Expr<Name<LExpr, RHS>> {                                 \
        -:   71:  public:                                                                      \
        -:   72:    using ValueType = decltype(std::declval<typename LExpr::ValueType>()       \
        -:   73:                                   op std::declval<RHS>());                    \
        -:   74:                                                                               \
        -:   75:    Name(const LExpr &expr, const RHS &rhs)                                    \
        -:   76:        : m_lexpr(expr)                                                        \
        -:   77:        , m_rhs(rhs) {}                                                        \
        -:   78:                                                                               \
        -:   79:    ValueType value() const { return m_lexpr.value() op m_rhs; }               \
        -:   80:    void show(std::ostream &os) const {                                        \
        -:   81:      m_lexpr.show(os);                                                        \
        -:   82:      os << " " #op " ";                                                       \
        -:   83:      ::rc::show(m_rhs, os);                                                   \
        -:   84:    }                                                                          \
        -:   85:                                                                               \
        -:   86:  private:                                                                     \
        -:   87:    const LExpr &m_lexpr;                                                      \
        -:   88:    const RHS &m_rhs;                                                          \
        -:   89:  };
        -:   90:
    9870*:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr4LTEqINS1_5ValueIdEEdE4showERSo:
    #####:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr4LTEqINS1_5ValueIdEEdE5valueEv:
     2453:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr4LTEqINS1_5ValueIiEEiE4showERSo:
        7:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr4LTEqINS1_5ValueIiEEiE5valueEv:
       11:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr7BoolANDINS1_4LTEqINS1_5ValueIdEEdEEbE4showERSo:
    #####:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr7BoolANDINS1_4LTEqINS1_5ValueIdEEdEEbE5valueEv:
    2453*:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZN2rc6detail4expr7BoolANDINS1_4LTEqINS1_5ValueIdEEdEEbEC2ERKS6_RKb:
     2453:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZN2rc6detail4expr4LTEqINS1_5ValueIdEEdEC2ERKS4_RKd:
     2453:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr7BoolANDINS1_4LTEqINS1_5ValueIiEEiEEbE4showERSo:
        7:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZNK2rc6detail4expr7BoolANDINS1_4LTEqINS1_5ValueIiEEiEEbE5valueEv:
       11:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZN2rc6detail4expr7BoolANDINS1_4LTEqINS1_5ValueIiEEiEEbEC2ERKS6_RKb:
       11:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
_ZN2rc6detail4expr4LTEqINS1_5ValueIiEEiEC2ERKS4_RKi:
       11:   91:RC_FOREACH_OP(RC_OP_CLASS)
------------------
        -:   92:
        -:   93:#undef RC_OP_CLASS
        -:   94:
        -:   95:struct Seed {
        -:   96:  template <typename T>
     2464:   97:  Value<T> operator->*(const T &value) const {
     2464:   98:    return Value<T>(value);
        -:   99:  }
        -:  100:};
        -:  101:
        -:  102:} // namespace expr
        -:  103:
        -:  104:#undef RC_FOREACH_OP
        -:  105:
        -:  106:/// This is the macro to use. Captures the given expression into an object that
        -:  107:/// has two methods, `value()` and `show()`. The former returns the value of the
        -:  108:/// expression while the latter outputs the expansion of the expression to a
        -:  109:/// given `std::ostream`.
        -:  110:///
        -:  111:/// The neat thing about this solution is that you can get both the value and
        -:  112:/// the expansion of the expression without evaluating any component more than
        -:  113:/// once.
        -:  114:#define RC_INTERNAL_CAPTURE(expression)                                        \
        -:  115:  (::rc::detail::expr::Seed()->*expression)
        -:  116:
        -:  117:} // namespace detail
        -:  118:} // namespace rc
