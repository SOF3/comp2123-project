        -:    0:Source:libs/rapidcheck/include/rapidcheck/Seq.h
        -:    0:Graph:sciNot5.gcno
        -:    0:Data:sciNot5.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <type_traits>
        -:    4:#include <memory>
        -:    5:#include <iostream>
        -:    6:
        -:    7:#include "rapidcheck/Nothing.h"
        -:    8:#include "rapidcheck/Maybe.h"
        -:    9:#include "rapidcheck/Traits.h"
        -:   10:
        -:   11:namespace rc {
        -:   12:
        -:   13:/// This class implements lazy sequences, or streams if you will. This is
        -:   14:/// mainly used by RapidCheck to implement shrinking where it is not feasible to
        -:   15:/// materialize all of the possible shrinks at once. In particular, a Seq may be
        -:   16:/// infinite although that's not appropriate for shrinking, of course!
        -:   17:///
        -:   18:/// A `Seq` object is constructed either as an empty sequence using the default
        -:   19:/// constructor or with an implementation object that implements the actual
        -:   20:/// sequence.
        -:   21:///
        -:   22:/// The implementation class must meet the following requirements:
        -:   23:///   - It must provide a method `Maybe<T> operator()()` (i.e. it must be a
        -:   24:///     functor) which returns the next value or nothing if there are no more
        -:   25:///     values. If this method throws, it is treated the same as `Nothing`.
        -:   26:///   - It must have a copy constructor that produces a semantically identical
        -:   27:///     copy. This means that it should provide equal values to the original.
        -:   28:///
        -:   29:/// However, unless you have a reason to create your own implementation class,
        -:   30:/// you should just use the provided combinators in the `rc::seq` namespace to
        -:   31:/// construct your `Seq`s.
        -:   32:template <typename T>
       11:   33:class Seq {
------------------
_ZN2rc3SeqINS_10ShrinkableISt6vectorIdSaIdEEEEEaSEOS6_:
        1:   33:class Seq {
------------------
_ZN2rc3SeqINS_10ShrinkableISt5tupleIJSt6vectorIdSaIdEEEEEEEaSEOS8_:
        1:   33:class Seq {
------------------
_ZN2rc3SeqINS_10ShrinkableISt6vectorINS1_IdEESaIS3_EEEEEaSEOS7_:
        1:   33:class Seq {
------------------
_ZN2rc3SeqINS_10ShrinkableIdEEEaSEOS3_:
        2:   33:class Seq {
------------------
_ZN2rc3SeqINS_3gen6detail6RecipeEEaSEOS4_:
        5:   33:class Seq {
------------------
_ZN2rc3SeqISt6vectorINS_10ShrinkableIdEESaIS3_EEEaSEOS6_:
        1:   33:class Seq {
------------------
        -:   34:  /// Creates a new `Seq` using the implementation class specificed by the
        -:   35:  /// type parameter constructed by forwarding the given arguments.
        -:   36:  template <typename Impl, typename... Args>
        -:   37:  friend Seq<typename std::result_of<Impl()>::type::ValueType>
        -:   38:  makeSeq(Args &&... args);
        -:   39:
        -:   40:public:
        -:   41:  /// The type of the values of this `Seq`.
        -:   42:  using ValueType = T;
        -:   43:
        -:   44:  /// Constructs an empty `Seq` that has no values.
       12:   45:  Seq() noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableISt5tupleIJSt6vectorIdSaIdEEEEEEEC2Ev:
        1:   45:  Seq() noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableISt6vectorIdSaIdEEEEEC2Ev:
        1:   45:  Seq() noexcept = default;
------------------
_ZN2rc3SeqINS_3gen6detail6RecipeEEC2Ev:
        5:   45:  Seq() noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableISt6vectorINS1_IdEESaIS3_EEEEEC2Ev:
        1:   45:  Seq() noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableIdEEEC2Ev:
        3:   45:  Seq() noexcept = default;
------------------
_ZN2rc3SeqISt6vectorINS_10ShrinkableIdEESaIS3_EEEC2Ev:
        1:   45:  Seq() noexcept = default;
------------------
        -:   46:
        -:   47:  /// Equivalent to default constructor.
        -:   48:  Seq(NothingType) noexcept;
        -:   49:
        -:   50:  /// Constructs a `Seq` from the given implementation object.
        -:   51:  template <typename Impl,
        -:   52:            typename = typename std::enable_if<
        -:   53:                !std::is_same<Decay<Impl>, Seq>::value>::type>
        -:   54:  explicit Seq(Impl &&impl);
        -:   55:
        -:   56:  /// Returns the next value.
        -:   57:  Maybe<T> next() noexcept;
        -:   58:
        -:   59:  Seq(const Seq &other);
        -:   60:  Seq &operator=(const Seq &rhs);
      42*:   61:  Seq(Seq &&other) noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableISt5tupleIJSt6vectorIdSaIdEEEEEEEC2EOS8_:
       12:   61:  Seq(Seq &&other) noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableISt6vectorIdSaIdEEEEEC2EOS6_:
    #####:   61:  Seq(Seq &&other) noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableISt6vectorINS1_IdEESaIS3_EEEEEC2EOS7_:
        6:   61:  Seq(Seq &&other) noexcept = default;
------------------
_ZN2rc3SeqINS_10ShrinkableIdEEEC2EOS3_:
    #####:   61:  Seq(Seq &&other) noexcept = default;
------------------
_ZN2rc3SeqISt6vectorINS_10ShrinkableIdEESaIS3_EEEC2EOS6_:
       18:   61:  Seq(Seq &&other) noexcept = default;
------------------
_ZN2rc3SeqINS_3gen6detail6RecipeEEC2EOS4_:
        6:   61:  Seq(Seq &&other) noexcept = default;
------------------
        -:   62:  Seq &operator=(Seq &&rhs) noexcept = default;
        -:   63:
        -:   64:private:
        -:   65:  class ISeqImpl;
        -:   66:
        -:   67:  template <typename Impl>
        -:   68:  class SeqImpl;
        -:   69:
        -:   70:  std::unique_ptr<ISeqImpl> m_impl;
        -:   71:};
        -:   72:
        -:   73:/// Two `Seq`s are considered equal if they return equal values. Note that this
        -:   74:/// requires either copying or moving of the `Seq`s.
        -:   75:template <typename T>
        -:   76:bool operator==(Seq<T> lhs, Seq<T> rhs);
        -:   77:
        -:   78:template <typename T>
        -:   79:bool operator!=(Seq<T> lhs, Seq<T> rhs);
        -:   80:
        -:   81:template <typename T>
        -:   82:std::ostream &operator<<(std::ostream &os, Seq<T> seq);
        -:   83:
        -:   84:} // namespace rc
        -:   85:
        -:   86:#include "Seq.hpp"
