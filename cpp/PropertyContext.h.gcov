        -:    0:Source:libs/rapidcheck/include/rapidcheck/detail/PropertyContext.h
        -:    0:Programs:6
        -:    1:#pragma once
        -:    2:
        -:    3:#include <string>
        -:    4:#include <iostream>
        -:    5:
        -:    6:#include "rapidcheck/detail/Results.h"
        -:    7:
        -:    8:namespace rc {
        -:    9:namespace detail {
        -:   10:
        -:   11:/// A `PropertyContext` is the hidden interface with which different actions in
        -:   12:/// properties communicate with the framework.
        -:   13:class PropertyContext {
        -:   14:public:
        -:   15:  /// Reports a result.
        -:   16:  ///
        -:   17:  /// @param result  The result.
        -:   18:  ///
        -:   19:  /// @return `true` if the result was handled and reported, `false` it it was
        -:   20:  ///         ignored
        -:   21:  virtual bool reportResult(const CaseResult &result) = 0;
        -:   22:
        -:   23:  /// Returns a stream to which additional information can be logged.
        -:   24:  virtual std::ostream &logStream() = 0;
        -:   25:
        -:   26:  /// Adds a tag to the current scope.
        -:   27:  virtual void addTag(std::string str) = 0;
        -:   28:
     113*:   29:  virtual ~PropertyContext() = default;
------------------
_ZN2rc6detail15PropertyContextD0Ev:
    #####:   29:  virtual ~PropertyContext() = default;
------------------
_ZN2rc6detail15PropertyContextD2Ev:
      113:   29:  virtual ~PropertyContext() = default;
------------------
        -:   30:};
        -:   31:
        -:   32:namespace param {
        -:   33:
        -:   34:struct CurrentPropertyContext {
        -:   35:  using ValueType = PropertyContext *;
        -:   36:  static PropertyContext *defaultValue();
        -:   37:};
        -:   38:
        -:   39:} // namespace param
        -:   40:} // namespace detail
        -:   41:} // namespace rc
