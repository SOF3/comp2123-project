        -:    0:Source:libs/rapidcheck/include/rapidcheck/Show.hpp
        -:    0:Programs:6
        -:    1:#pragma once
        -:    2:
        -:    3:#include <map>
        -:    4:#include <vector>
        -:    5:#include <deque>
        -:    6:#include <forward_list>
        -:    7:#include <list>
        -:    8:#include <set>
        -:    9:#include <unordered_set>
        -:   10:#include <unordered_map>
        -:   11:#include <memory>
        -:   12:#include <cstdint>
        -:   13:#include <type_traits>
        -:   14:#include <array>
        -:   15:#include <sstream>
        -:   16:
        -:   17:#include "rapidcheck/detail/Traits.h"
        -:   18:
        -:   19:namespace rc {
        -:   20:namespace detail {
        -:   21:
        -:   22:template <typename TupleT, std::size_t I = std::tuple_size<TupleT>::value>
        -:   23:struct TupleHelper;
        -:   24:
        -:   25:template <std::size_t I>
        -:   26:struct TupleHelper<std::tuple<>, I> {
        -:   27:  static void showTuple(const std::tuple<> &/*tuple*/, std::ostream &/*os*/) {}
        -:   28:};
        -:   29:
        -:   30:template <typename TupleT>
        -:   31:struct TupleHelper<TupleT, 1> {
        1:   32:  static void showTuple(const TupleT &tuple, std::ostream &os) {
        1:   33:    show(std::get<std::tuple_size<TupleT>::value - 1>(tuple), os);
        1:   34:  }
        -:   35:};
        -:   36:
        -:   37:template <typename TupleT, std::size_t I>
        -:   38:struct TupleHelper {
        -:   39:  static void showTuple(const TupleT &tuple, std::ostream &os) {
        -:   40:    show(std::get<std::tuple_size<TupleT>::value - I>(tuple), os);
        -:   41:    os << ", ";
        -:   42:    TupleHelper<TupleT, I - 1>::showTuple(tuple, os);
        -:   43:  }
        -:   44:};
        -:   45:
        -:   46:template <typename T>
        5:   47:void showValue(T value,
        -:   48:               typename std::enable_if<std::is_same<T, bool>::value,
        -:   49:                                       std::ostream>::type &os) {
       5*:   50:  os << (value ? "true" : "false");
        5:   51:}
        -:   52:
        -:   53:template <typename T>
        -:   54:void showValue(T value,
        -:   55:               typename std::enable_if<(std::is_same<T, char>::value ||
        -:   56:                                        std::is_same<T, unsigned char>::value),
        -:   57:                                       std::ostream>::type &os) {
        -:   58:  os << static_cast<int>(value);
        -:   59:}
        -:   60:
        -:   61:void showValue(const std::string &value, std::ostream &os);
        -:   62:void showValue(const char *value, std::ostream &os);
        -:   63:
        -:   64:template <typename T>
        -:   65:void showValue(T *p, std::ostream &os) {
        -:   66:  show(*p, os);
        -:   67:  auto flags = os.flags();
        -:   68:  os << " (" << std::hex << std::showbase << p << ")";
        -:   69:  os.flags(flags);
        -:   70:}
        -:   71:
        -:   72:template <typename T, typename Deleter>
        -:   73:void showValue(const std::unique_ptr<T, Deleter> &p, std::ostream &os) {
        -:   74:  show(p.get(), os);
        -:   75:}
        -:   76:
        -:   77:template <typename T>
        -:   78:void showValue(const std::shared_ptr<T> &p, std::ostream &os) {
        -:   79:  show(p.get(), os);
        -:   80:}
        -:   81:
        -:   82:template <typename T1, typename T2>
        -:   83:void showValue(const std::pair<T1, T2> &pair, std::ostream &os) {
        -:   84:  os << "(";
        -:   85:  show(pair.first, os);
        -:   86:  os << ", ";
        -:   87:  show(pair.second, os);
        -:   88:  os << ")";
        -:   89:}
        -:   90:
        -:   91:template <typename... Types>
        1:   92:void showValue(const std::tuple<Types...> &tuple, std::ostream &os) {
        1:   93:  os << "(";
        1:   94:  detail::TupleHelper<std::tuple<Types...>>::showTuple(tuple, os);
        1:   95:  os << ")";
        1:   96:}
        -:   97:
        -:   98:template <typename T, typename Allocator>
        1:   99:void showValue(const std::vector<T, Allocator> &value, std::ostream &os) {
        1:  100:  showCollection("[", "]", value, os);
        1:  101:}
        -:  102:
        -:  103:template <typename T, typename Allocator>
        -:  104:void showValue(const std::deque<T, Allocator> &value, std::ostream &os) {
        -:  105:  showCollection("[", "]", value, os);
        -:  106:}
        -:  107:
        -:  108:template <typename T, typename Allocator>
        -:  109:void showValue(const std::forward_list<T, Allocator> &value, std::ostream &os) {
        -:  110:  showCollection("[", "]", value, os);
        -:  111:}
        -:  112:
        -:  113:template <typename T, typename Allocator>
        -:  114:void showValue(const std::list<T, Allocator> &value, std::ostream &os) {
        -:  115:  showCollection("[", "]", value, os);
        -:  116:}
        -:  117:
        -:  118:template <typename Key, typename Compare, typename Allocator>
        -:  119:void showValue(const std::set<Key, Compare, Allocator> &value,
        -:  120:               std::ostream &os) {
        -:  121:  showCollection("{", "}", value, os);
        -:  122:}
        -:  123:
        -:  124:template <typename Key, typename T, typename Compare, typename Allocator>
        -:  125:void showValue(const std::map<Key, T, Compare, Allocator> &value,
        -:  126:               std::ostream &os) {
        -:  127:  showCollection("{", "}", value, os);
        -:  128:}
        -:  129:
        -:  130:template <typename Key, typename Compare, typename Allocator>
        -:  131:void showValue(const std::multiset<Key, Compare, Allocator> &value,
        -:  132:               std::ostream &os) {
        -:  133:  showCollection("{", "}", value, os);
        -:  134:}
        -:  135:
        -:  136:template <typename Key, typename T, typename Compare, typename Allocator>
        -:  137:void showValue(const std::multimap<Key, T, Compare, Allocator> &value,
        -:  138:               std::ostream &os) {
        -:  139:  showCollection("{", "}", value, os);
        -:  140:}
        -:  141:
        -:  142:template <typename Key, typename Hash, typename KeyEqual, typename Allocator>
        -:  143:void showValue(const std::unordered_set<Key, Hash, KeyEqual, Allocator> &value,
        -:  144:               std::ostream &os) {
        -:  145:  showCollection("{", "}", value, os);
        -:  146:}
        -:  147:
        -:  148:template <typename Key,
        -:  149:          typename T,
        -:  150:          typename Hash,
        -:  151:          typename KeyEqual,
        -:  152:          typename Allocator>
        -:  153:void showValue(
        -:  154:    const std::unordered_map<Key, T, Hash, KeyEqual, Allocator> &value,
        -:  155:    std::ostream &os) {
        -:  156:  showCollection("{", "}", value, os);
        -:  157:}
        -:  158:
        -:  159:template <typename Key, typename Hash, typename KeyEqual, typename Allocator>
        -:  160:void showValue(
        -:  161:    const std::unordered_multiset<Key, Hash, KeyEqual, Allocator> &value,
        -:  162:    std::ostream &os) {
        -:  163:  showCollection("{", "}", value, os);
        -:  164:}
        -:  165:
        -:  166:template <typename Key,
        -:  167:          typename T,
        -:  168:          typename Hash,
        -:  169:          typename KeyEqual,
        -:  170:          typename Allocator>
        -:  171:void showValue(
        -:  172:    const std::unordered_multimap<Key, T, Hash, KeyEqual, Allocator> &value,
        -:  173:    std::ostream &os) {
        -:  174:  showCollection("{", "}", value, os);
        -:  175:}
        -:  176:
        -:  177:template <typename CharT, typename Traits, typename Allocator>
        -:  178:void showValue(const std::basic_string<CharT, Traits, Allocator> &value,
        -:  179:               std::ostream &os) {
        -:  180:  showCollection("\"", "\"", value, os);
        -:  181:}
        -:  182:
        -:  183:template <typename T, std::size_t N>
        -:  184:void showValue(const std::array<T, N> &value, std::ostream &os) {
        -:  185:  showCollection("[", "]", value, os);
        -:  186:}
        -:  187:
        -:  188:RC_SFINAE_TRAIT(HasShowValue, decltype(showValue(std::declval<T>(), std::cout)))
        -:  189:
        -:  190:template <typename T,
        -:  191:          bool = HasShowValue<T>::value,
        -:  192:          bool = IsStreamInsertible<T>::value>
        -:  193:struct ShowDefault {
        -:  194:  static void show(const T &/*value*/, std::ostream &os) { os << "<\?\?\?>"; }
        -:  195:};
        -:  196:
        -:  197:template <typename T, bool X>
        -:  198:struct ShowDefault<T, true, X> {
        7:  199:  static void show(const T &value, std::ostream &os) { showValue(value, os); }
------------------
_ZN2rc6detail11ShowDefaultISt6vectorIdSaIdEELb1ELb0EE4showERKS4_RSo:
        1:  199:  static void show(const T &value, std::ostream &os) { showValue(value, os); }
------------------
_ZN2rc6detail11ShowDefaultISt5tupleIJSt6vectorIdSaIdEEEELb1ELb0EE4showERKS6_RSo:
        1:  199:  static void show(const T &value, std::ostream &os) { showValue(value, os); }
------------------
_ZN2rc6detail11ShowDefaultIbLb1ELb1EE4showERKbRSo:
        5:  199:  static void show(const T &value, std::ostream &os) { showValue(value, os); }
------------------
        -:  200:};
        -:  201:
        -:  202:template <typename T>
        -:  203:struct ShowDefault<T, false, true> {
       11:  204:  static void show(const T &value, std::ostream &os) { os << value; }
------------------
_ZN2rc6detail11ShowDefaultIdLb0ELb1EE4showERKdRSo:
        1:  204:  static void show(const T &value, std::ostream &os) { os << value; }
------------------
_ZN2rc6detail11ShowDefaultIiLb0ELb1EE4showERKiRSo:
       10:  204:  static void show(const T &value, std::ostream &os) { os << value; }
------------------
        -:  205:};
        -:  206:
        -:  207:} // namespace detail
        -:  208:
        -:  209:template <typename T>
       18:  210:void show(const T &value, std::ostream &os) {
       18:  211:  detail::ShowDefault<T>::show(value, os);
       18:  212:}
------------------
_ZN2rc4showISt6vectorIdSaIdEEEEvRKT_RSo:
        1:  210:void show(const T &value, std::ostream &os) {
        1:  211:  detail::ShowDefault<T>::show(value, os);
        1:  212:}
------------------
_ZN2rc4showISt5tupleIJSt6vectorIdSaIdEEEEEEvRKT_RSo:
        1:  210:void show(const T &value, std::ostream &os) {
        1:  211:  detail::ShowDefault<T>::show(value, os);
        1:  212:}
------------------
_ZN2rc4showIdEEvRKT_RSo:
        1:  210:void show(const T &value, std::ostream &os) {
        1:  211:  detail::ShowDefault<T>::show(value, os);
        1:  212:}
------------------
_ZN2rc4showIiEEvRKT_RSo:
       10:  210:void show(const T &value, std::ostream &os) {
       10:  211:  detail::ShowDefault<T>::show(value, os);
       10:  212:}
------------------
_ZN2rc4showIbEEvRKT_RSo:
        5:  210:void show(const T &value, std::ostream &os) {
        5:  211:  detail::ShowDefault<T>::show(value, os);
        5:  212:}
------------------
        -:  213:
        -:  214:template <typename T>
        -:  215:std::string toString(const T &value) {
        -:  216:  std::ostringstream os;
        -:  217:  show(value, os);
        -:  218:  return os.str();
        -:  219:}
        -:  220:
        -:  221:template <typename Collection>
        1:  222:void showCollection(const std::string &prefix,
        -:  223:                    const std::string &suffix,
        -:  224:                    const Collection &collection,
        -:  225:                    std::ostream &os) {
        1:  226:  os << prefix;
        1:  227:  auto cbegin = begin(collection);
        1:  228:  auto cend = end(collection);
        1:  229:  if (cbegin != cend) {
        1:  230:    show(*cbegin, os);
       1*:  231:    for (auto it = ++cbegin; it != cend; it++) {
    #####:  232:      os << ", ";
    #####:  233:      show(*it, os);
        -:  234:    }
        -:  235:  }
        1:  236:  os << suffix;
        1:  237:}
        -:  238:
        -:  239:} // namespace rc
